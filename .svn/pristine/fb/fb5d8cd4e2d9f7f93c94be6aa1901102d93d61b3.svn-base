package mvc.service;

import helper.GeometryHandler;
import helper.JacksonUtil;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.servlet.ServletContextEvent;

import mvc.cache.DataItem;
import mvc.cache.GisData;
import mvc.entity.Area;
import mvc.entity.Numb;
import mvc.entity.Vehicle;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Service;

import com.vividsolutions.jts.geom.Geometry;

@Service
public class GisService {

	protected JdbcTemplate jdbcTemplate = null;
	protected JdbcTemplate jdbcTemplate2 = null;  //105 db
	protected Thread thread;
	public JdbcTemplate getJdbcTemplate() {
		return jdbcTemplate;
	}

	@Autowired
	public void setJdbcTemplate(JdbcTemplate jdbcTemplate) {
		this.jdbcTemplate = jdbcTemplate;
	}

	public JdbcTemplate getJdbcTemplate2() {
		return jdbcTemplate2;
	}

	@Autowired
	public void setJdbcTemplate2(JdbcTemplate jdbcTemplate2) {
		this.jdbcTemplate2 = jdbcTemplate2;
	}

	private JacksonUtil jacksonUtil = JacksonUtil.buildNormalBinder();
	private boolean exit_thread;

	public String test() {
		System.out.println(jdbcTemplate);
		System.out.println(jdbcTemplate2);

		return "ok";
	}
	//查询所有车辆信息
	public List<Vehicle> findAllVhic() {
		List<Vehicle>vhic=new ArrayList<Vehicle>();
		String str="select * from" +
				" HZGPS_TAXI.VW_VEHICLE@TAXILINK t left join" +
				" hz_taxi.TB_TAXI_STATUS_NEW@TAXILINK105 s  on t.sim_num=s.mdt_no" +
				" where t.vehi_no like '%浙AT%'";
		List<Map<String, Object>> list = jdbcTemplate.queryForList(str);
		for(int i=0;i<list.size();i++){
			Vehicle vehi=new Vehicle();
			vehi.setCompname(list.get(i).get("COMP_NAME")==null?"":list.get(i).get("COMP_NAME").toString());
			vehi.setVehino(list.get(i).get("VEHI_NO")==null?"":list.get(i).get("VEHI_NO").toString());
			vehi.setSimka(list.get(i).get("SIM_NUM")==null?"":list.get(i).get("SIM_NUM").toString());
			vehi.setCartype(list.get(i).get("VT_NAME")==null?"":list.get(i).get("VT_NAME").toString());
			vehi.setVehisim(list.get(i).get("VEHI_SIM")==null?"":list.get(i).get("VEHI_SIM").toString());
			vehi.setMdtno(list.get(i).get("MT_NAME")==null?"":list.get(i).get("MT_NAME").toString());
			vehi.setOwnname(list.get(i).get("OWN_NAME")==null?"":list.get(i).get("OWN_NAME").toString());
			vehi.setOwntel(list.get(i).get("OWN_TEL")==null?"":list.get(i).get("OWN_TEL").toString());
			vehi.setColor(list.get(i).get("VC_NAME")==null?"":list.get(i).get("VC_NAME").toString());
			
			
			 vehi.setDateTime(list.get(i).get("STIME")==null?"":list.get(i).get("STIME").toString());
     	    vehi.setCarStatus(list.get(i).get("STATUS")==null?"":list.get(i).get("STATUS").toString());
     	    vehi.setHeading(list.get(i).get("HEADING")==null?"":list.get(i).get("HEADING").toString());
     	    vehi.setGpsStatus(list.get(i).get("GPS_STATUS")==null?"":list.get(i).get("GPS_STATUS").toString());
     	    vehi.setLati(list.get(i).get("PY")==null?0:Double.parseDouble(list.get(i).get("PY").toString()));
				vehi.setLongi(list.get(i).get("PX")==null?0:Double.parseDouble(list.get(i).get("PX").toString()));
				vehi.setSpeed(list.get(i).get("SPEED")==null?"":list.get(i).get("SPEED").toString());
				if(vehi.getDateTime()!=""&&jisuan(vehi.getDateTime())){
					vehi.setOnoffstate("1");
				}else{
					vehi.setOnoffstate("0");
				}
			vhic.add(vehi);
		}
		return vhic;
	}
	//计算车辆是否上线
	public static boolean jisuan(String date1){ 
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        double result=0;
		try {
			Date start = sdf.parse(date1);
			Date end = new Date();
			long cha = end.getTime() - start.getTime(); 
			result = cha * 1.0 / (1000 * 60); 
			
		} catch (ParseException e) {
			e.printStackTrace();
		}
		if(result<=30){ 
			return true; 
		}else{ 
			return false; 
		} 
    } 
	//查询所有区域
	public List<Area> findAllArea() {
		List<Area>area=new ArrayList<Area>();
		String str="select * from hz_taxi.TB_AREA@TAXILINK105 t";
		List<Map<String, Object>> list = jdbcTemplate.queryForList(str);
		for(int i=0;i<list.size();i++){
			Area a=new Area();
			a.setId(list.get(i).get("area_id")==null?"":list.get(i).get("area_id").toString());
			a.setAreaname(list.get(i).get("area_name")==null?"":list.get(i).get("area_name").toString());
			a.setAreasize(list.get(i).get("AREA_SIZE")==null?"":list.get(i).get("AREA_SIZE").toString());
			a.setAreams(list.get(i).get("AREA_DESCRIBE")==null?"":list.get(i).get("AREA_DESCRIBE").toString());
			a.setAreazbs(list.get(i).get("AREA_COORDINATES")==null?"":list.get(i).get("AREA_COORDINATES").toString());
			a.setOrderid(list.get(i).get("ORDERID")==null?"":list.get(i).get("ORDERID").toString());
			a.setAll(new ArrayList<String>());
			String nums = list.get(i).get("ALARMNUM")==null?"10;10;10;10;10;10;10;10;10;10;10;10;10;10;10;10;10;10;10;10;10;10;10;10;10;10;10;10;10;10;10;10;10;10;10;10;10;10;10;10;10;10;10;10;10;10;10;10;":list.get(i).get("ALARMNUM").toString();
			
			for(int i1=0;i1<nums.split(";").length;i1++){
				a.setAreabjs(nums.split(";")[getybjnum()]+"");
			}
			area.add(a);
		}
		return area;
	}
	//根据时间添加区域预警数
	public int getybjnum(){
		SimpleDateFormat sdf = new SimpleDateFormat("HH:mm");
		//System.out.println(sdf.format(new Date()));
		String t = sdf.format(new Date());
		int a = timenum(t);
		if(a==timenum("23:58")||a==timenum("23:59")||a==timenum("00:02")||a==timenum("00:01")){
			return 0;
		}else if(a>=timenum("00:03")&&a<=timenum("00:57")){
			return 1;
		}else if(a>=timenum("00:58")&&a<=timenum("01:02")){
			return 2;
		}else if(a>=timenum("01:03")&&a<=timenum("01:57")){
			return 3;
		}else if(a>=timenum("01:58")&&a<=timenum("02:02")){
			return 4;
		}else if(a>=timenum("02:03")&&a<=timenum("02:57")){
			return 5;
		}else if(a>=timenum("02:58")&&a<=timenum("03:02")){
			return 6;
		}else if(a>=timenum("03:03")&&a<=timenum("03:57")){
			return 7;
		}else if(a>=timenum("03:58")&&a<=timenum("04:02")){
			return 8;
		}else if(a>=timenum("04:03")&&a<=timenum("04:57")){
			return 9;
		}else if(a>=timenum("04:58")&&a<=timenum("05:02")){
			return 10;
		}else if(a>=timenum("05:03")&&a<=timenum("05:57")){
			return 11;
		}else if(a>=timenum("05:58")&&a<=timenum("06:02")){
			return 12;
		}else if(a>=timenum("06:03")&&a<=timenum("06:57")){
			return 13;
		}else if(a>=timenum("06:58")&&a<=timenum("07:02")){
			return 14;
		}else if(a>=timenum("07:03")&&a<=timenum("07:57")){
			return 15;
		}else if(a>=timenum("07:58")&&a<=timenum("08:02")){
			return 16;
		}else if(a>=timenum("08:03")&&a<=timenum("08:57")){
			return 17;
		}else if(a>=timenum("08:58")&&a<=timenum("09:02")){
			return 18;
		}else if(a>=timenum("09:03")&&a<=timenum("09:57")){
			return 19;
		}else if(a>=timenum("09:58")&&a<=timenum("10:02")){
			return 20;
		}else if(a>=timenum("10:03")&&a<=timenum("10:57")){
			return 21;
		}else if(a>=timenum("10:58")&&a<=timenum("11:02")){
			return 22;
		}else if(a>=timenum("11:03")&&a<=timenum("11:57")){
			return 23;
		}else if(a>=timenum("11:58")&&a<=timenum("12:02")){
			return 24;
		}else if(a>=timenum("12:03")&&a<=timenum("12:57")){
			return 25;
		}else if(a>=timenum("12:58")&&a<=timenum("13:02")){
			return 26;
		}else if(a>=timenum("13:03")&&a<=timenum("13:57")){
			return 27;
		}else if(a>=timenum("13:58")&&a<=timenum("14:02")){
			return 28;
		}else if(a>=timenum("14:03")&&a<=timenum("14:57")){
			return 29;
		}else if(a>=timenum("14:58")&&a<=timenum("15:02")){
			return 30;
		}else if(a>=timenum("15:03")&&a<=timenum("15:57")){
			return 31;
		}else if(a>=timenum("15:58")&&a<=timenum("16:02")){
			return 32;
		}else if(a>=timenum("16:03")&&a<=timenum("16:57")){
			return 33;
		}else if(a>=timenum("16:58")&&a<=timenum("17:02")){
			return 34;
		}else if(a>=timenum("17:03")&&a<=timenum("17:57")){
			return 35;
		}else if(a>=timenum("17:58")&&a<=timenum("18:02")){
			return 36;
		}else if(a>=timenum("18:03")&&a<=timenum("18:57")){
			return 37;
		}else if(a>=timenum("18:58")&&a<=timenum("19:02")){
			return 38;
		}else if(a>=timenum("19:03")&&a<=timenum("19:57")){
			return 39;
		}else if(a>=timenum("19:58")&&a<=timenum("20:02")){
			return 40;
		}else if(a>=timenum("20:03")&&a<=timenum("20:57")){
			return 41;
		}else if(a>=timenum("20:58")&&a<=timenum("21:02")){
			return 42;
		}else if(a>=timenum("21:03")&&a<=timenum("21:57")){
			return 43;
		}else if(a>=timenum("21:58")&&a<=timenum("22:02")){
			return 44;
		}else if(a>=timenum("22:03")&&a<=timenum("22:57")){
			return 45;
		}else if(a>=timenum("22:58")&&a<=timenum("23:02")){
			return 46;
		}else if(a>=timenum("23:03")&&a<=timenum("23:57")){
			return 47;
		}else{
			return 0;
		}
	}
	public int timenum(String arg){
		return Integer.parseInt(arg.split(":")[0])*60+Integer.parseInt(arg.split(":")[1]);
	}
	public void stop(){
		exit_thread = true;
	}
	public String task() {
		exit_thread = false;
		thread = new Thread() {
			private List<Vehicle> vehilist = new ArrayList<Vehicle>();
			private String keyword = "", compid = "所有公司,所有分公司,所有车辆";
			private Numb num = new Numb();
			private List<Area> arealist = new ArrayList<Area>();
			private long sleepTime = 30000;

			@Override
			public void run() {
				while (true && !exit_thread) {
					String id = "207";
					int onnum = 0;
					int offnum = 0;
					int hnum = 0;
					int nnum = 0;

					long startTime = System.currentTimeMillis();
					vehilist = findAllVhic();//TODO jdbcTemplate2.queryForList("");
					for (int i = 0; i < vehilist.size(); i++) {
						Vehicle va = vehilist.get(i);
						if (va.getLati() == null || "".equals(va.getLati())
								|| "0.0".equals(va.getLati())
								|| "".equals(va.getLongi())
								|| "0.0".equals(va.getLongi())) {
							offnum++;
						} else {

							if (va.getOnoffstate().equals("1")) {
								onnum++;
								if (va.getCarStatus().equals("0")) {
									nnum++;
								} else {
									hnum++;
								}
							} else {
								offnum++;
							}
						}
					}
					int total = vehilist.size();
					num.setTotal(total + "");
					num.setOnnum(onnum + "");
					num.setOffnum(offnum + "");
					num.setHnum(hnum + "");
					num.setNnum(nnum + "");

					arealist = findAllArea();//TODO jdbcTemplate2.queryForList("");
					
					for(int j=0;j<vehilist.size();j++){
						for(int k=0;k<arealist.size();k++){
							if(rectContains(vehilist.get(j), arealist.get(k))){
								arealist.get(k).getAll().add(vehilist.get(j).getVehino()+";"+vehilist.get(j).getCompname());
								break;
							}
						}
					}
					
					long endTime = System.currentTimeMillis();
					//System.out.println("##cost:" + (endTime - startTime)
					//		/ 1000.0f);

					DataItem data = (DataItem) GisData.map.get("data");
					if (null == data) {
						data = new DataItem();
						GisData.map.put("data", data);
					}

					endTime = System.currentTimeMillis();
					Collections.sort(vehilist, new PointCompare2());
					List<Vehicle> l2 = null, l3 = null, l4 = null, l5 = null, l6 = null, l7 = null;
					try {
						l2 = deepCopy(vehilist);
						l3 = deepCopy(vehilist);
						l4 = deepCopy(vehilist);
						l5 = deepCopy(vehilist);
						l6 = deepCopy(vehilist);
						l7 = deepCopy(vehilist);
						// deletePoint2(vehilist,0.1);
						deletePoint2(l2, 0.02);// 12,13,
						deletePoint2(l3, 0.01);// 14,15
						deletePoint2(l4, 0.07);// 10,11

						deletePoint2(l5, 0.3);//
						deletePoint2(l6, 1);//
						deletePoint2(l7, 4);//
					} catch (Exception e) {
						e.printStackTrace();
					}
					data.setArealist(arealist);
					data.setNum(num);
					data.setVehilist(vehilist);
					data.setL2(l2);
					data.setL3(l3);
					data.setL4(l4);
					data.setL5(l5);
					data.setL6(l6);
					data.setL7(l7);

				//	System.out.println("## sort" + (System.currentTimeMillis() - endTime) / 1000.f);
					endTime = System.currentTimeMillis();

					//System.out.println(vehilist.size());
					deleteItem(vehilist);
					deleteItem(l2);
					deleteItem(l3);
					deleteItem(l4);
					deleteItem(l5);
					deleteItem(l6);
					deleteItem(l7);
				//	System.out.println(vehilist.size() + "," + l2.size() + ","
				//			+ l3.size() + "," + l4.size() + "," + l5.size()
				//			+ "," + l6.size() + "," + l7.size());
				//	System.out.println("## cluster "+ (System.currentTimeMillis() - endTime) / 1000.f);

					try {
						Thread.sleep(sleepTime );
					} catch (Exception e) {
						e.printStackTrace();
					}
				}
				
			}

			public void deletePoint2(List<Vehicle> list, double distanceCz) {
				for (int i = 0; i < list.size(); i++) {
					Vehicle p1 = list.get(i);
					for (int j = i + 1; j < list.size(); j++) {
						if (p1.isDeleteFlag()) {
							continue;
						}
						Vehicle p2 = list.get(j);
						if (p2.isDeleteFlag()) {
							continue;
						}
						double distance = getDistance(p1, p2);
						// System.out.print(distance+",#");

						if (distance < distanceCz) {
							// if(distanceCz == 0.07){
							// System.out.println("##"+i+",p1:"+p1.getLongi()+","
							// + p1.getLati()+"\tp2:"+p2.getLongi()+"," +
							// p2.getLati() + "\t"+distance);
							// }
							if (p1.getX2() == 0) {
								p1.setX2(p1.getLongi());
							}
							if (p1.getY2() == 0) {
								p1.setY2(p1.getLati());
							}
							p2.setDeleteFlag(true);
							p1.setCluster(p1.getCluster() + 1);
							p1.setX2(p1.getX2() + p2.getLongi());
							p1.setY2(p1.getY2() + p2.getLati());
//							p1.getXys().append(
//									p2.getLongi() + "," + p2.getLati() + ";");
						}
					}
				}
			}

		 	private  void  deleteItem(List<Vehicle> list) {
		 		for(Iterator<Vehicle> iterator = list.iterator();iterator.hasNext();){
		 			Vehicle item = iterator.next();
		 			if (item.isDeleteFlag()) {
						iterator.remove();
					} else {
						if (item.getCluster() > 50) {
							item.setLati(item.getY2() / item.getCluster());
							item.setLongi(item.getX2() / item.getCluster());
							// System.out.println(item.getLongi()+","+item.getLati()+","+item.getCluster());
							// if(item.getCluster()==476){
							// System.out.println(item.getXys());
							// }
						}
					}
		 		}
			}

			public double getDistance(Vehicle p1, Vehicle p2) {
				double dx = p2.getLongi() - p1.getLongi();
				double dy = p2.getLati() - p1.getLati();

				double distance = Math.sqrt(Math.pow(dx, 2) + Math.pow(dy, 2));
				return distance;
				// System.out.println(distance);
			}

			public <T> List<T> deepCopy(List<T> src) throws IOException,
					ClassNotFoundException {
				ByteArrayOutputStream byteOut = new ByteArrayOutputStream();
				ObjectOutputStream out = new ObjectOutputStream(byteOut);
				out.writeObject(src);

				ByteArrayInputStream byteIn = new ByteArrayInputStream(
						byteOut.toByteArray());
				ObjectInputStream in = new ObjectInputStream(byteIn);
				@SuppressWarnings("unchecked")
				List<T> dest = (List<T>) in.readObject();
				return dest;
			}
		};

		try {
			thread.start();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}

	
	/**
	 * 车辆是否在区域内
	 * @param vehicle
	 * @param area
	 * @return
	 */
	private boolean rectContains(Vehicle vehicle, Area area) {
		String[] zbs = area.getAreazbs().split(";");//120.123,30.123;123.123,33.211;
		Geometry geometry=GeometryHandler.getGeometryObject(area.getAreazbs()+";"+zbs[0]);
		String xy = vehicle.getLongi() +"," + vehicle.getLati();
		Geometry g2=GeometryHandler.getGeometryObject(xy);
		return geometry.contains(g2);
		
//		for(int i=0;i<zbs.length;i++){
//			xs[i] = Integer.parseInt(zbs[i].split(",")[0].replace(".", ""));
//			ys[i] = Integer.parseInt(zbs[i].split(",")[1].replace(".", ""));
//		}
//		
//		Polygon polygon =new Polygon(xs,ys,xs.length);
//		
//		String dx = vehicle.getLongi()+"";
//		String dy = vehicle.getLati()+"";

//		return polygon.contains(Integer.parseInt(dx.replace(".", "")), Integer.parseInt(dy.replace(".", "")));
		
		
		//网上方法
		/*Builder b = new Builder();
		String[] zbs = area.getAreazbs().split(";");
		for(int i=0;i<zbs.length;i++){
			float px = Float.parseFloat(zbs[i].split(",")[0]);
			float py = Float.parseFloat(zbs[i].split(",")[1]);
			b.addVertex(new Point(px, py));
		}
		Polygon polygon = b.build();
		boolean contains = polygon.contains(new Point((float)dx, (float)dy));
		return contains;*/
	}

	public void contextDestroyed(ServletContextEvent sce) {
		System.out.println("#####system destroye#####");
	}
}


class PointCompare2 implements Comparator<Vehicle> {
	public int compare(final Vehicle a, final Vehicle b) {
		if (a.getLongi() < b.getLongi()) {
			return -1;
		} else if (a.getLongi() > b.getLongi()) {
			return 1;
		} else if (a.getLati() < b.getLati()) {
			return -1;
		} else if (a.getLati() > b.getLati()) {
			return 1;
		} else {
			return 0;
		}
	}
}

